a) S -> 0 S 1 | 0 1

   > The language generated consists of an equal number of 0's and 1's with 0's
   > first, then 1's (i.e. 0^n1^n where n>=1).

b) S -> + S S | - S S | a

   > The language generated represents the prefix arithmetic of addition and
   > subtraction operations.
   
c) S -> S (S) S | epsilon

   > The language generated represents balanced and nested parenthesis.
   
d) S -> a S b S | b S a S | epsilon

   > The language generated by the grammar above represents an equal number of
   > a's and b's in any order.

e) S -> a | S + S | S S | S * | ( S )

   > The language generated by the grammar above represents a set of rules
   > for regular expressions.
